{
    "contents" : "require(shiny)\nrequire(RMySQL)\nrequire(knitr)\n\ngoNum2Char <- function(go) {\n    paste('GO: ', \n          sapply(go, function(n) \n              paste(rep('0', 6 - floor(log10(n))),\n                    collapse = '')),\n          go, sep = '')\n}\n\nshinyServer(function(input, output, session) {\n    \n    # set logfile\n    sink(paste('~/shinylog/gene_ontology/', Sys.Date(), sep = ''),\n         append = T, type = 'output')\n    \n    # set connection to db\n    con <- dbConnect(MySQL(),\n                     username = 'Rmysql',\n                     password = readLines('~/rmysql_pw')[[1]],\n                     dbname = 'gene_ontology')\n    cat('connection: OK\\n\\n')\n\n    # clear output pages when navbar is reactivated\n    observeEvent(input$nav, {\n        output$q_go_out <- renderText('')\n        output$q_og_out <- renderText('')\n        output$q_gg_out <- renderText('')\n    })\n    \n    # response gene-ontology query\n    observeEvent(input$q_go_submit, {\n        # get input\n        gene_list <- strsplit(input$q_go_gene_list, '[,\\\\ \\\\n]+')[[1]]\n        species <- ifelse(input$q_go_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        go_type <- input$q_go_namespace\n        go_signif <- input$q_go_evidence\n        operation <- input$q_go_operation\n        \n        # output log\n        cat('Gene->Ontology Query Reseived:\\n')\n        cat('gene list:', paste(gene_list, collapse = ', '), '\\n')\n        cat('species:', species, '\\n')\n        cat('go namespace:', paste(go_type, collapse = ', '), '\\n')\n        cat('go evidence:', go_signif, '\\n')\n        cat('operation:', operation, '\\n\\n')\n        \n        # format query elements\n        db_desc <- paste(species, '_desc', sep = '')\n        db_onto <- paste(species, '_go', sep = '')\n        gene_list <- paste('(\"',\n                           paste(gene_list, collapse = '\", \"'),\n                           '\")', sep = '')\n        go_signif <- ifelse(go_signif == 'experimental only',\n                            'where\\n      go_signif in (\"EXP\", \"IDA\", \"IPI\", \"IMP\", \"IGI\", \"IEP\")\\n',\n                            '')\n        revert <- c('B', 'M', 'C')\n        names(revert) <- c('biological process', 'molecular function', 'cellular component')\n        go_type <- paste('(\"',\n                         paste(revert[go_type], collapse = '\", \"'),\n                         '\")', sep = '')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_g_o.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{db_desc\\\\}', db_desc, qry_text)\n        qry_text <- gsub('\\\\{db_onto\\\\}', db_onto, qry_text)\n        qry_text <- gsub('\\\\{gene_list\\\\}', gene_list, qry_text)\n        qry_text <- gsub('\\\\{go_signif\\\\}', go_signif, qry_text)\n        qry_text <- gsub('\\\\{go_type\\\\}', go_type, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        qry$go_type <- sapply(qry$go_type, switch,\n                              B = 'Biological Process',\n                              M = 'Molecular Function',\n                              C = 'Cellular Component')\n        labels <- qry$gene_label\n        labels <- labels[!duplicated(labels)]\n        \n        # knit up output html\n        if (nrow(qry)) {\n            if (operation == 'list separately') {\n                text <- character(length(labels))\n                for (i in 1:length(labels)) {\n                    g <- labels[i]\n                    \n                    sub <- qry[qry$gene_label == g, ]\n                    if (nrow(sub)) {\n                        g_desc <- sub$gene_desc[1]\n                        text[i] <- paste(text[i],\n                                      '<p><span style=\"font-size:130%;\"><strong><i>', g, '</i></strong><br></span>\\n',\n                                      '<strong>Gene Desciption:</strong> ', g_desc, '</p>\\n',\n                                      sep = '')\n                        dup <- duplicated(sub$go)\n                        evi <- tapply(sub$go_signif, sub$go, paste, collapse = ' | ')\n                        sub <- sub[!dup, ]\n                        sub$go <- goNum2Char(sub$go)\n                        sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                         '<br>Ontology Name: ', sub$go_name,\n                                         '<br>Type: ', sub$go_type,\n                                         '<br>Evidence: ', evi,\n                                         '</li>', sep = '')\n                        sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                        text[i] <- paste(text[i], sublist, sep = '')\n                    }\n                }\n                text <- paste(text, collapse = '<hr>')\n            } else if (operation == 'intersection') {\n                gene_info <- qry[1:2]\n                gene_info <- gene_info[!duplicated(gene_info), ]\n                gene_info <- paste('<strong><i>', gene_info[[1]], ': </i></strong>',\n                                   gene_info[[2]], sep = '')\n                text <- paste('<p><span style=\"font-size:130%;\"><strong>Queried List:</strong></span><br>',\n                              paste(gene_info, collapse = '<br>'), '<hr>', sep = '')\n                \n                all_go <- levels(factor(qry$go))\n                mat <- sapply(labels, function(g) {\n                    all_go %in% qry$go[qry$gene_label == g]\n                })\n                inter <- all_go[apply(mat, 1, all)]\n                if (length(inter)) {\n                    evi <- sapply(inter, function(go) {\n                        sig <- qry$go_signif[ qry$go == go ]\n                        sig <- sig[!duplicated(sig)]\n                        paste(sig, collapse = ' | ')\n                    })\n                    sub <- qry[ qry$go %in% inter, ]\n                    sub <- sub[!duplicated(sub$go), ]\n                    sub$go <- goNum2Char(sub$go)\n                    sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                     '<br>Ontology Name: ', sub$go_name,\n                                     '<br>Type: ', sub$go_type,\n                                     '<br>Evidence: ', evi,\n                                     '</li>', sep = '')\n                    sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                    text <- paste(text, sublist, sep = '')\n                } else text <- paste(text, '<p>Intercection GO Term Not Found</p>')\n            } else {\n                gene_info <- qry[1:2]\n                gene_info <- gene_info[!duplicated(gene_info), ]\n                gene_info <- paste('<strong><i>', gene_info[[1]], ': </i></strong>',\n                                   gene_info[[2]], sep = '')\n                text <- paste('<p><span style=\"font-size:130%;\"><strong>Queried List:</strong></span><br>',\n                              paste(gene_info, collapse = '<br>'), '<hr>', sep = '')\n                \n                all_go <- levels(factor(qry$go))\n                mat <- sapply(labels, function(g) {\n                    all_go %in% qry$go[qry$gene_label == g]\n                })\n                inter <- all_go[apply(mat, 1, any)]\n                if (length(inter)) {\n                    evi <- sapply(inter, function(go) {\n                        sig <- qry$go_signif[ qry$go == go ]\n                        sig <- sig[!duplicated(sig)]\n                        paste(sig, collapse = ' | ')\n                    })\n                    sub <- qry[ qry$go %in% inter, ]\n                    sub <- sub[!duplicated(sub$go), ]\n                    sub$go <- goNum2Char(sub$go)\n                    sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                     '<br>Ontology Name: ', sub$go_name,\n                                     '<br>Type: ', sub$go_type,\n                                     '<br>Evidence: ', evi,\n                                     '</li>', sep = '')\n                    sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                    text <- paste(text, sublist, sep = '')\n                } else text <- paste(text, '<p>Union GO Term Not Found</p>')\n            } \n        } else text = '<p><strong>Query No Result</strong></p>'\n        \n        output$q_go_out <- renderText(text)\n    })\n    \n    # response ontology-gene query\n    observeEvent(input$q_og_submit, {\n        # get input\n        go_list <- as.numeric(\n            strsplit(gsub('GO:(\\\\ )*', '', input$q_og_onto_list), '[,\\\\ \\\\n]+')[[1]])\n        species <- ifelse(input$q_og_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        \n        # output log\n        cat('Ontology->Gene Query Reseived:\\n')\n        cat('ontology list:', paste(go_list, collapse = ', '), '\\n')\n        cat('from species:', species, '\\n')\n        \n        # format query elements\n        taxi <- species\n        lengthgo <- length(go_list)\n        go_list <- paste(go_list, collapse = ', ')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_o_g.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{taxi\\\\}', taxi, qry_text)\n        qry_text <- gsub('\\\\{lengthgo\\\\}', lengthgo, qry_text)\n        qry_text <- gsub('\\\\{go_list\\\\}', go_list, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        \n        # output\n        output$q_og_out <- renderTable(qry)\n    })\n    \n    # response homology query\n    observeEvent(input$q_gg_submit, {\n        # get input\n        gene_list <- strsplit(input$q_gg_gene_list, '[,\\\\ \\\\n]+')[[1]]\n        species <- ifelse(input$q_gg_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        \n        # output log\n        cat('Yeast Homology Query Reseived:\\n')\n        cat('gene list:', paste(gene_list, collapse = ', '), '\\n')\n        cat('from species:', species, '\\n')\n        \n        # format query elements\n        fromyeast <- paste(species, '_desc', sep = '')\n        taxi <- gsub('^(.)+_', '', species)\n        restrain <- paste('where gene_label in (\"',\n                          paste(gene_list, collapse = '\", \"'), '\") or id in (\"',\n                          paste(gene_list, collapse = '\", \"'), '\")', sep = '')\n        prestrain <- ifelse(species == 'sz_pombe', restrain, '')\n        crestrain <- ifelse(species == 's_cerevisiae', restrain, '')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_g_g.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{fromyeast\\\\}', fromyeast, qry_text)\n        qry_text <- gsub('\\\\{taxi\\\\}', taxi, qry_text)\n        qry_text <- gsub('\\\\{restrain\\\\}', restrain, qry_text)\n        qry_text <- gsub('\\\\{prestrain\\\\}', prestrain, qry_text)\n        qry_text <- gsub('\\\\{crestrain\\\\}', crestrain, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        \n        output$q_gg_out <- renderTable(qry)\n    })\n    \n    # close db connection when stop app\n    cancel.onSessionEnded <- session$onSessionEnded(function() {\n        dbDisconnect(con)\n        cat('disconnection: OK\\n\\n')\n    })\n    \n})\n",
    "created" : 1430674745332.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "60413901",
    "id" : "7F4DE59B",
    "lastKnownWriteTime" : 1431070191,
    "path" : "~/CodeRMain/gene-ontology-database/server_code/crossyeast_go/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}