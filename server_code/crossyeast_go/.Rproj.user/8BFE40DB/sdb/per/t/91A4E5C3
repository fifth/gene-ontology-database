{
    "contents" : "---\ntitle: 'CrossYeast GO: an Online Gene Ontology Database Tool'\nauthor: \"Li Yutze, Yu Zhichao\"\ndate: \"May 4, 2015\"\noutput: html_document\n---\n\n- - -\n\n## Introduction\n\n__*Gene ontology*__ is a systematic gene function annotation system, which using a set of distinct and structured terms to describe genes' entity in three attributes: biological process, molecular function and cellular component. For most model organisms, almost all genes in their genome databases are annotated with a set of GO terms. These annotations come from direct experimental data or are predicted via sequence analysis. GO terms can be used to help analysis gene lists generated by microarries, mass-specs, deep sequencings and genetic screenings, where either simple statistical tests or complex mathematical models are run on these lists, generating a list of over-represented GO terms against the database, which indicates the validity of, or gives extra information to the experiments that generated the gene list. In this course project on biological databases, we are going to build a relational database __*CrossYeast GO*__ on yeast gene ontologies using __*MySQL*__ and __*RMySQL*__ with datasets obtained from the SGD and the Pombase, and using __*R-Shiny*__ to set up an user interface to query the database and execute GO enrichment analysis.\n\n- - -\n\n## Motivation\n\n_Schizosaccharomyces pombe_ and _Saccharomyces cerevisiae_ are two commonly used yeast species in labs. The budding yeast _S. cerevisiae_ has an well organized and annotated database, the __SGD__ (Saccharomyces Genome Database), while the fission yeast _Sz. pombe_ also has the __Pombase__ which contains annotations from experimental evidences and some proportion of computational simulations. We are designing to build an gene ontology database that links these two model organisms together using GO terms and gene homology data. Users should be able to query the database using gene lists, generating GO term lists which can fourth used to query, resulting in new gene lists. Also gene lists can be used to find homologues across two yeast species, used in GO query or analysis, then can be used to compare the significances. We also planed to build an io database, allowing users to upload there lists to the server, and other users can query this result database using descriptions the uploader left or gene lists and GO lists to get similar lists, which can be used as references in their experiments.\n\n- - -\n\n## Features\n\n<center>\n![navbar](./navbar.png)\n</center>\n\nCurrently the database system is building in progress:\n\n* Design and set up database structure\n* Loading data into database using __R__'s `RMySQL` package\n* Design and build the framework of the user interface using __R-Shiny__\n* Implement simple query functions\n* (Implemented separately) the GO analysis tool\n\nOn-the-way functions including:\n\n* Merge the GO analysis tool into the ui\n* Uploading results and querying results\n* Detail ui improvement using javascript\n\n### Simple Query Operations\n\n#### Query GO using gene lists\n\n<center class=\"side\">\n![goq](./g_o_qry.png)\n</center>\n\nUsers can use gene lists containing systematic names or common names separated by comma or white spaces to query the database, generating lists of GO terms. Options including:\n\n- Select yeast species to query (budding and fission yeast)\n- Select GO namespaces to query (biological process, molecular function and cellular component)\n- Select GO evidence level used to query (experimental or all)\n- Select operations for output, including separated lists, intersection and union\n\n#### Query gene using GO lists\n\n<center class=\"side\">\n![ogq](./o_g_qry.png)\n</center>\n\nUsing a list of GO terms to search against the database genes containing all terms in the list, user can select yeast species and GO evidence level used in query.\n\n#### Query homologous genes cross yeast species\n\n<center class=\"side\">\n![ggq](./g_g_qry.png)\n</center>\n\nUsers can alter the gene list they have here into a list of homolog genes in the other yeast species.\n\n- - -\n\n## Database Structure\n\nThe database have 9 tables forming 2 parts. The main datasets have 6 tables:\n\n```PlaneText\ns_cerevisiae_desc           : gene information for budding yeast\ns_cerevisiae_go             : gene to GO table for budding yeast\nsz_pombe_desc               : gene information for fission yeast\nsz_pombe_go                 : gene to GO table for fission yeast\ngo_term_desc                : descriptions on GO terms\nyeast_homology              : homology index table linkin two yeasts\n```\n\nAnd a user result part containing 3 tables:\n\n```PlaneText\nuser_results                : user result basic information\nuser_results_genetic        : genetic backgrounds for user's results\nuser_results_conditional    : environmental backgrounds for user's results\n```\n\nThe relations among these tables are shown below:\n\n<center>\n![model](./model.png)\n</center>\n\n- - -\n\n## Code Appendix\n\nDesign database relationship\n\n```SQL\n# Create database\ncreate database gene_ontology;\nuse gene_ontology;\n\n# Create tables\ncreate table go_term_desc(\n  go int\n    primary key not null,\n  go_type char(1)\n    not null,\n  go_name varchar(50),\n  go_desc varchar(250)\n);\n\ncreate table sz_pombe_desc (\n  id varchar(32)\n    primary key not null,\n  gene_label varchar(32),\n  gene_desc varchar(250)\n);\n\ncreate table s_cerevisiae_desc (\n  id varchar(32)\n    primary key not null,\n  gene_label varchar(32),\n  gene_desc varchar(250)\n);\n\ncreate table sz_pombe_go (\n  id varchar(32),\n  go int,\n  go_signif char(3),\n  foreign key (id) references sz_pombe_desc(id),\n  foreign key (go) references go_term_desc(go)\n);\n\ncreate table s_cerevisiae_go (\n  id varchar(32),\n  go int,\n  go_signif char(3),\n  foreign key (id) references s_cerevisiae_desc(id),\n  foreign key (go) references go_term_desc(go)\n);\n\ncreate table yeast_homology (\n  pombe_id varchar(30),\n  cerevisiae_id varchar(30),\n  foreign key (pombe_id) references sz_pombe_desc(id),\n  foreign key (cerevisiae_id) references s_cerevisiae_desc(id)\n);\n\ncreate table user_results (\n  id int\n    primary key auto_increment,\n  loc varchar(50),\n  pw varchar(50),\n  laxi char(1),\n  summary varchar(250),\n  check (laxi in ('C', 'P'))\n);\n\ncreate table user_results_genetic (\n  id int,\n  genetic varchar(32),\n  man char(1),\n  foreign key (id) references user_results(id),\n  check (man in ('+', '-'))\n);\n\ncreate table user_results_conditional (\n  id int,\n  conditional varchar(30),\n  foreign key (id) references user_results(id)\n);\n```\n\nLoad data into __MySQL__ using __R__\n\n```R\n# Set up connection to gene_ontology database\nrequire(RMySQL)\ncon <- dbConnect(MySQL(),\n                 username = 'Rmysql',\n                 password = readLines('~/rmysql_pw')[[1]],\n                 dbname = 'gene_ontology')\n\n# Set working directory to flat data location\n# Read tables and manipulated them into tidy formats\n# Load tables into sql databases\nsetwd('~/Documents/Courses/zju_bioinfomatics_II/biological_databases/flat_data/')\n\n## GO Reference\ngo_ref <- readLines('go_terms.obo')\nnew_term <- go_ref == '[Term]'\nstart <- which(new_term)[1] - 1\ngo_ref <- go_ref[-1:-start]\nnew_term <- new_term[-1:-start]\nnew_term <- cumsum(new_term)\ngo_ref <- tapply(go_ref, new_term, function(term) term[c(2, 4, 3, 5)])\ngo_ref <- matrix(unlist(go_ref), byrow = T, ncol = 4)\ngo_ref <- as.data.frame(go_ref, stringsAsFactors = F)\nnames(go_ref) <- c('go', 'go_type', 'go_name', 'go_desc')\ngo_ref$go <- as.numeric(gsub('[^0-9]', '', go_ref$go))\ngo_ref$go_type <- factor(go_ref$go_type)\ngo_ref$go_type <- c('B', 'C', 'M')[go_ref$go_type]\ngo_ref$go_name <- gsub('name:\\\\ ', '', go_ref$go_name)\ngo_ref$go_desc <- gsub('def:\\\\ \"', '', go_ref$go_desc)\ngo_ref$go_desc <- gsub('\\\\.\"(.)+$', '', go_ref$go_desc)\ndbWriteTable(con, 'go_term_desc', go_ref, row.names = F, append = T)\n\n## S. cerivisiae\nceriv <- read.table('cerevisea_go.txt', header = F, sep = '\\t',\n                    quote = '\"', comment.char = '!', as.is = T)\ndesc <- ceriv[, c(11, 3, 10)]\ndesc[, 1] <- gsub('\\\\|(.)+$', '', desc[, 1])\ndesc <- desc[!duplicated(desc), ]\nnames(desc) <- dbListFields(con, 's_cerevisiae_desc')\ndbWriteTable(con, 's_cerevisiae_desc', desc, row.names = F, append = T)\nc_id <- desc$id\ngo <- ceriv[, c(11, 5, 7)]\ngo[, 1] <- gsub('\\\\|(.)+$', '', go[, 1])\ngo <- go[!duplicated(go), ]\nnames(go) <- dbListFields(con, \"s_cerevisiae_go\")\ngo$go <- as.numeric(gsub('[^0-9]', '', go$go))\ndbWriteTable(con, 's_cerevisiae_go', go, row.names = F, append = T)\n\n## Sz. pombe\npombe <- read.table('pombe_go.txt', header = F, sep = '\\t',\n                    quote = '\"', comment.char = '!', as.is = T)\ndesc <- pombe[, c(2, 3, 10)]\ndesc <- desc[!duplicated(desc), ]\nnames(desc) <- dbListFields(con, 'sz_pombe_desc')\ndbWriteTable(con, 'sz_pombe_desc', desc, row.names = F, append = T)\np_id <- desc$id\ngo <- pombe[, c(2, 5, 7)]\ngo <- go[!duplicated(go), ]\nnames(go) <- dbListFields(con, \"sz_pombe_go\")\ngo$go <- as.numeric(gsub('[^0-9]', '', go$go))\ndbWriteTable(con, 'sz_pombe_go', go, row.names = F, append = T)\n\n\n## Yeast Homology\nhomology <- read.table('pombe>cerevisiae_orthologs.txt', header = F, sep = '\\t',\n                       comment.char = '#', as.is = T)\nnames(homology) <- dbListFields(con, 'yeast_homology')\nhomology <- homology[ homology$cerevisiae_id != 'NONE', ]\ncount <- stringr::str_count(homology$cerevisiae_id, '\\\\|') + 1\nhomology <- data.frame(\n    pombe_id = rep(homology$pombe_id, times = count),\n    cerevisiae_id = unlist(strsplit(homology$cerevisiae_id, '\\\\|'))\n)\nhomology <- homology[ homology$pombe_id %in% p_id & homology$cerevisiae_id %in% c_id, ]\ndbWriteTable(con, 'yeast_homology', homology, row.names = F, append = T)\n```\n\nQuery Templates used in __R__ server code\n\n```sql\n# in query_g_o.sql\nselect\n  d.gene_label,\n  d.gene_desc,\n  g_o.go,\n  g_o.go_signif,\n  o.go_type,\n  o.go_name,\n  o.go_desc\nfrom\n  (\n    select\n      *\n    from\n      {db_desc}\n    where\n      gene_label in {gene_list} or\n      id in {gene_list}\n  ) as d,\n  (\n    select\n      *\n    from\n      {db_onto}\n    {go_signif}\n  ) as g_o,\n  (\n    select\n      *\n    from\n      go_term_desc\n    where\n      go_type in {go_type}\n  ) as o\nwhere\n  d.id = g_o.id and\n  g_o.go = o.go\n\n# in query_o_g.sql\nselect des.gene_label, des.gene_desc\nfrom\n  (\n    select distinct\n      id, count(go in ({go_list})) as cnt\n    from (\n      select distinct id, go\n      from {taxi}_go\n    ) mer\n    group by id\n  ) as res,\n  {taxi}_desc as des\nwhere res.cnt = {lengthgo} and des.id = res.id\n\n# in query_g_g.sql\nselect\n  p.gene_label as plab, p.gene_desc as pdesc,\n  c.gene_label as clab, c.gene_desc as cdesc\nfrom\n  (\n    select *\n    from yeast_homology\n    where\n      {taxi}_id in (\n        select id\n        from {fromyeast}\n        {restrain}\n      )\n  ) as h,\n  (\n    select *\n    from sz_pombe_desc\n    {prestrain}\n  ) as p,\n  (\n    select *\n    from s_cerevisiae_desc\n    {crestrain}\n  ) as c\nwhere\n  c.id = h.cerevisiae_id and\n  p.id = h.pombe_id\n```\n\n__R-Shiny__ server code\n\n```R\n# in ui.R\nrequire(shiny)\n\nshinyUI(\n    \n    navbarPage(title = 'CrossYeast GO', id = 'nav',\n               position = 'static-top',\n               tabPanel('About', value = 'about',\n                        icon = icon(name = 'info', lib = 'font-awesome'),\n                        helpText('help info')\n               ),\n               \n               navbarMenu(title = 'Query',\n                          icon = icon(name = 'filter', lib = 'font-awesome'),\n                   tabPanel('Gene-Ontology', value = 'query_go',\n                            sidebarLayout(\n                                sidebarPanel(\n                                    textInput(inputId = 'q_go_gene_list',\n                                              label = 'Use Gene List to Query Ontologies'),\n                                    helpText('Use comma, white space or newline to separate genes.\\\nGene name and ID are both supported'),\n                                    hr(),\n                                    selectInput(inputId = 'q_go_taxi',\n                                                label = 'Yeast Species',\n                                                choices = c('S. cerevisiae',\n                                                            'Sz. pombe')),\n                                    checkboxGroupInput(inputId = 'q_go_namespace',\n                                                       label = 'Use GO Namespace',\n                                                       choices = c('biological process',\n                                                                   'molecular function',\n                                                                   'cellular component'),\n                                                       selected = 'biological process'),\n                                    radioButtons(inputId = 'q_go_evidence',\n                                                 label = 'GO Evidence Level',\n                                                 choices = c('experimental only',\n                                                             'use all'),\n                                                 inline = T),\n                                    radioButtons(inputId = 'q_go_operation',\n                                                 label = 'Operation',\n                                                 choices = c('list separately',\n                                                             'intersection',\n                                                             'union'),\n                                                 inline = T),\n                                    hr(),\n                                    actionButton(inputId = 'q_go_submit',\n                                                 label = 'Send Query',\n                                                 icon = icon('check-circle-o'))\n                                ),\n                                mainPanel(\n                                    htmlOutput('q_go_out')\n                                )\n                            )\n                   ),\n                   \n                   tabPanel('Ontology-Gene', value = 'query_og',\n                            sidebarLayout(\n                                sidebarPanel(\n                                    textInput(inputId = 'q_og_onto_list',\n                                              label = 'Use Ontology list to Query Genes'),\n                                    helpText('Use comma, white space or newline to separate GO terms.\\\nYou can both input terms with/without \"GO:\"'),\n                                    hr(),\n                                    selectInput(inputId = 'q_og_taxi',\n                                                label = 'Yeast Species',\n                                                choices = c('S. cerevisiae',\n                                                            'Sz. pombe')),\n                                    radioButtons(inputId = 'q_og_evidence',\n                                                 label = 'GO Evidence Level',\n                                                 choices = c('experimental only',\n                                                             'use all'), \n                                                 inline = T),\n                                    hr(),\n                                    actionButton(inputId = 'q_og_submit',\n                                                 label = 'Query',\n                                                 icon = icon('check-circle-o'))\n                                ),\n                                mainPanel(\n                                    tableOutput('q_og_out')\n                                )\n                            )\n                   ),\n                   \n                   tabPanel('Pombe-Cerevisiae', value = 'query_gg',\n                            sidebarLayout(\n                                sidebarPanel(\n                                    textInput(inputId = 'q_gg_gene_list',\n                                              label = 'Search Yeast Homologous Genes Cross Yeast Species\\\nGene name and ID are both supported'),\n                                    hr(),\n                                    helpText('Use comma, white space or newline to separate genes'),\n                                    selectInput(inputId = 'q_gg_taxi',\n                                                label = 'From Species',\n                                                choices = c('S. cerevisiae',\n                                                            'Sz. pombe')),\n                                    hr(),\n                                    actionButton(inputId = 'q_gg_submit',\n                                                 label = 'Query',\n                                                 icon = icon('check-circle-o'))\n                                ),\n                                mainPanel(\n                                    tableOutput('q_gg_out')\n                                )\n                            )\n                   )\n               ),\n                   \n               tabPanel('GO Cluster', value = 'go_cluster',\n                        icon = icon(name = 'th-large', lib = 'font-awesome'),\n                        h1('this')\n               ),\n               \n               tabPanel('Search Record', value = 'search_record',\n                        icon = icon(name = 'archive', lib = 'font-awesome'),\n                        h2('that')\n               )\n    )\n)\n\n# in server.R\nrequire(shiny)\nrequire(RMySQL)\nrequire(knitr)\n\ngoNum2Char <- function(go) {\n    paste('GO: ', \n          sapply(go, function(n) \n              paste(rep('0', 6 - floor(log10(n))),\n                    collapse = '')),\n          go, sep = '')\n}\n\nshinyServer(function(input, output, session) {\n    \n    # set connection to db\n    con <- dbConnect(MySQL(),\n                     username = 'Rmysql',\n                     password = readLines('~/rmysql_pw')[[1]],\n                     dbname = 'gene_ontology')\n    cat('connection: OK\\n\\n')\n\n    # clear output pages when navbar is reactivated\n    observeEvent(input$nav, {\n        output$q_go_out <- renderText('')\n        output$q_og_out <- renderText('')\n        output$q_gg_out <- renderText('')\n    })\n    \n    # response gene-ontology query\n    observeEvent(input$q_go_submit, {\n        # get input\n        gene_list <- strsplit(input$q_go_gene_list, '[,\\\\ \\\\n]+')[[1]]\n        species <- ifelse(input$q_go_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        go_type <- input$q_go_namespace\n        go_signif <- input$q_go_evidence\n        operation <- input$q_go_operation\n        \n        # output log\n        cat('Gene->Ontology Query Reseived:\\n')\n        cat('gene list:', paste(gene_list, collapse = ', '), '\\n')\n        cat('species:', species, '\\n')\n        cat('go namespace:', paste(go_type, collapse = ', '), '\\n')\n        cat('go evidence:', go_signif, '\\n')\n        cat('operation:', operation, '\\n\\n')\n        \n        # format query elements\n        db_desc <- paste(species, '_desc', sep = '')\n        db_onto <- paste(species, '_go', sep = '')\n        gene_list <- paste('(\"',\n                           paste(gene_list, collapse = '\", \"'),\n                           '\")', sep = '')\n        go_signif <- ifelse(go_signif == 'experimental only',\n                            'where\\n      go_signif in (\"EXP\", \"IDA\", \"IPI\", \"IMP\", \"IGI\", \"IEP\")\\n',\n                            '')\n        revert <- c('B', 'M', 'C')\n        names(revert) <- c('biological process', 'molecular function', 'cellular component')\n        go_type <- paste('(\"',\n                         paste(revert[go_type], collapse = '\", \"'),\n                         '\")', sep = '')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_g_o.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{db_desc\\\\}', db_desc, qry_text)\n        qry_text <- gsub('\\\\{db_onto\\\\}', db_onto, qry_text)\n        qry_text <- gsub('\\\\{gene_list\\\\}', gene_list, qry_text)\n        qry_text <- gsub('\\\\{go_signif\\\\}', go_signif, qry_text)\n        qry_text <- gsub('\\\\{go_type\\\\}', go_type, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        qry$go_type <- sapply(qry$go_type, switch,\n                              B = 'Biological Process',\n                              M = 'Molecular Function',\n                              C = 'Cellular Component')\n        labels <- qry$gene_label\n        labels <- labels[!duplicated(labels)]\n        \n        # knit up output html\n        if (nrow(qry)) {\n            if (operation == 'list separately') {\n                text <- character(length(labels))\n                for (i in 1:length(labels)) {\n                    g <- labels[i]\n                    \n                    sub <- qry[qry$gene_label == g, ]\n                    if (nrow(sub)) {\n                        g_desc <- sub$gene_desc[1]\n                        text[i] <- paste(text[i],\n                                      '<p><span style=\"font-size:130%;\"><strong><i>', g, '</i></strong><br></span>\\n',\n                                      '<strong>Gene Desciption:</strong> ', g_desc, '</p>\\n',\n                                      sep = '')\n                        dup <- duplicated(sub$go)\n                        evi <- tapply(sub$go_signif, sub$go, paste, collapse = ' | ')\n                        sub <- sub[!dup, ]\n                        sub$go <- goNum2Char(sub$go)\n                        sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                         '<br>Ontology Name: ', sub$go_name,\n                                         '<br>Type: ', sub$go_type,\n                                         '<br>Evidence: ', evi,\n                                         '</li>', sep = '')\n                        sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                        text[i] <- paste(text[i], sublist, sep = '')\n                    }\n                }\n                text <- paste(text, collapse = '<hr>')\n            } else if (operation == 'intersection') {\n                gene_info <- qry[1:2]\n                gene_info <- gene_info[!duplicated(gene_info), ]\n                gene_info <- paste('<strong><i>', gene_info[[1]], ': </i></strong>',\n                                   gene_info[[2]], sep = '')\n                text <- paste('<p><span style=\"font-size:130%;\"><strong>Queried List:</strong></span><br>',\n                              paste(gene_info, collapse = '<br>'), '<hr>', sep = '')\n                \n                all_go <- levels(factor(qry$go))\n                mat <- sapply(labels, function(g) {\n                    all_go %in% qry$go[qry$gene_label == g]\n                })\n                inter <- all_go[apply(mat, 1, all)]\n                if (length(inter)) {\n                    evi <- sapply(inter, function(go) {\n                        sig <- qry$go_signif[ qry$go == go ]\n                        sig <- sig[!duplicated(sig)]\n                        paste(sig, collapse = ' | ')\n                    })\n                    sub <- qry[ qry$go %in% inter, ]\n                    sub <- sub[!duplicated(sub$go), ]\n                    sub$go <- goNum2Char(sub$go)\n                    sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                     '<br>Ontology Name: ', sub$go_name,\n                                     '<br>Type: ', sub$go_type,\n                                     '<br>Evidence: ', evi,\n                                     '</li>', sep = '')\n                    sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                    text <- paste(text, sublist, sep = '')\n                } else text <- paste(text, '<p>Intercection GO Term Not Found</p>')\n            } else {\n                gene_info <- qry[1:2]\n                gene_info <- gene_info[!duplicated(gene_info), ]\n                gene_info <- paste('<strong><i>', gene_info[[1]], ': </i></strong>',\n                                   gene_info[[2]], sep = '')\n                text <- paste('<p><span style=\"font-size:130%;\"><strong>Queried List:</strong></span><br>',\n                              paste(gene_info, collapse = '<br>'), '<hr>', sep = '')\n                \n                all_go <- levels(factor(qry$go))\n                mat <- sapply(labels, function(g) {\n                    all_go %in% qry$go[qry$gene_label == g]\n                })\n                inter <- all_go[apply(mat, 1, any)]\n                if (length(inter)) {\n                    evi <- sapply(inter, function(go) {\n                        sig <- qry$go_signif[ qry$go == go ]\n                        sig <- sig[!duplicated(sig)]\n                        paste(sig, collapse = ' | ')\n                    })\n                    sub <- qry[ qry$go %in% inter, ]\n                    sub <- sub[!duplicated(sub$go), ]\n                    sub$go <- goNum2Char(sub$go)\n                    sublist <- paste('<li><strong>', sub$go, '</strong>',\n                                     '<br>Ontology Name: ', sub$go_name,\n                                     '<br>Type: ', sub$go_type,\n                                     '<br>Evidence: ', evi,\n                                     '</li>', sep = '')\n                    sublist <- paste('<ul>', paste(sublist, collapse = ''), '</ul>')\n                    text <- paste(text, sublist, sep = '')\n                } else text <- paste(text, '<p>Union GO Term Not Found</p>')\n            } \n        } else text = '<p><strong>Query No Result</strong></p>'\n        \n        output$q_go_out <- renderText(text)\n    })\n    \n    # response ontology-gene query\n    observeEvent(input$q_og_submit, {\n        # get input\n        go_list <- as.numeric(\n            strsplit(gsub('GO:(\\\\ )*', '', input$q_og_onto_list), '[,\\\\ \\\\n]+')[[1]])\n        species <- ifelse(input$q_og_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        \n        # output log\n        cat('Ontology->Gene Query Reseived:\\n')\n        cat('ontology list:', paste(go_list, collapse = ', '), '\\n')\n        cat('from species:', species, '\\n')\n        \n        # format query elements\n        taxi <- species\n        lengthgo <- length(go_list)\n        go_list <- paste(go_list, collapse = ', ')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_o_g.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{taxi\\\\}', taxi, qry_text)\n        qry_text <- gsub('\\\\{lengthgo\\\\}', lengthgo, qry_text)\n        qry_text <- gsub('\\\\{go_list\\\\}', go_list, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        \n        # output\n        output$q_og_out <- renderTable(qry)\n    })\n    \n    # response homology query\n    observeEvent(input$q_gg_submit, {\n        # get input\n        gene_list <- strsplit(input$q_gg_gene_list, '[,\\\\ \\\\n]+')[[1]]\n        species <- ifelse(input$q_gg_taxi == 'Sz. pombe',\n                          'sz_pombe', 's_cerevisiae')\n        \n        # output log\n        cat('Yeast Homology Query Reseived:\\n')\n        cat('gene list:', paste(gene_list, collapse = ', '), '\\n')\n        cat('from species:', species, '\\n')\n        \n        # format query elements\n        fromyeast <- paste(species, '_desc', sep = '')\n        taxi <- gsub('^(.)+_', '', species)\n        restrain <- paste('where gene_label in (\"',\n                          paste(gene_list, collapse = '\", \"'), '\") or id in (\"',\n                          paste(gene_list, collapse = '\", \"'), '\")', sep = '')\n        prestrain <- ifelse(species == 'sz_pombe', restrain, '')\n        crestrain <- ifelse(species == 's_cerevisiae', restrain, '')\n        \n        # knit up query\n        qry_text <- paste(unlist(readLines('query_g_g.sql')), collapse = '\\n')\n        qry_text <- gsub('\\\\{fromyeast\\\\}', fromyeast, qry_text)\n        qry_text <- gsub('\\\\{taxi\\\\}', taxi, qry_text)\n        qry_text <- gsub('\\\\{restrain\\\\}', restrain, qry_text)\n        qry_text <- gsub('\\\\{prestrain\\\\}', prestrain, qry_text)\n        qry_text <- gsub('\\\\{crestrain\\\\}', crestrain, qry_text)\n        cat('formated query:\\n', qry_text, '\\n\\n', sep = '')\n        \n        qry <- dbGetQuery(con, qry_text)\n        \n        output$q_gg_out <- renderTable(qry)\n    })\n    \n    # close db connection when stop app\n    cancel.onSessionEnded <- session$onSessionEnded(function() {\n        dbDisconnect(con)\n        cat('disconnection: OK\\n\\n')\n    })\n    \n})\n```\n\n\n<style type='text/css'>\n.main-container {\n    width: 70%\n}\nimg {\n    width: 65%;\n}\n.side > img {\n    width: 35%;\n}\n</style>",
    "created" : 1430727227043.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1162918045",
    "id" : "91A4E5C3",
    "lastKnownWriteTime" : 1430727859,
    "path" : "~/Documents/Courses/zju_bioinfomatics_II/biological_databases/report/report.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}